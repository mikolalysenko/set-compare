{
  "name": "microtime",
  "version": "0.3.3",
  "description": "Get the current time in microseconds",
  "author": {
    "name": "Wade Simmons",
    "email": "wade@wades.im",
    "url": "http://wades.im/mons"
  },
  "homepage": "https://github.com/wadey/node-microtime",
  "repository": {
    "type": "git",
    "url": "git://github.com/wadey/node-microtime.git"
  },
  "main": "./index",
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "node test.js",
    "install": "node-gyp rebuild"
  },
  "dependencies": {
    "bindings": "1.0.0"
  },
  "gypfile": true,
  "readme": "[![Build Status](https://travis-ci.org/wadey/node-microtime.png)](https://travis-ci.org/wadey/node-microtime)\n\n# node-microtime\n\nDate.now() will only give you accuracy in milliseconds. This module calls\n`gettimeofday(2)` to get the time in microseconds and provides it in a few\ndifferent formats. The same warning from that function applies:\n_The resolution of the system clock is hardware dependent, and the time may\nbe updated continuously or in ``ticks.''_\n\n# Installation\n\n    npm install microtime\n\n* Requires npm >= 1.1.5 (which bundles node-gyp). See https://github.com/wadey/node-microtime/issues/9\n\n# Usage\n\n### microtime.now()\n\nGet the current time in microseconds as an integer. Since JavaScript can only\nrepresent integer values accurately up to `Math.pow(2, 53)`, this value will\nbe accurate up to _Tue, 05 Jun 2255 23:47:34 GMT_.\n\n### microtime.nowDouble()\n\nGet the current time in seconds as a floating point number with microsecond\naccuracy (similar to `time.time()` in Python and `Time.now.to_f` in Ruby).\n\n### microtime.nowStruct()\n\nGet the current time and return as a list with seconds and microseconds (matching the return value of `gettimeofday(2)`).\n\n# Example\n\n    > var microtime = require('microtime')\n    > microtime.now()\n    1297448895297028\n    > microtime.nowDouble()\n    1297448897.600976\n    > microtime.nowStruct()\n    [ 1297448902, 753875 ]\n\n## Estimating clock resolution\n\nStarting with version 0.1.3, there is a test script that tries to guess the clock resolution. You can run it with `npm test microtime`. Example output:\n\n    microtime.now() = 1298960083489806\n    microtime.nowDouble() = 1298960083.511521\n    microtime.nowStruct() = [ 1298960083, 511587 ]\n\n    Guessing clock resolution...\n    Clock resolution observed: 1us\n\n## Tested on\n\n    Node.js 0.2.6\n      - OS X 10.6.6\n      - Ubuntu 10.04\n\n    Node.js 0.4.1\n      - OS X 10.6.6\n      - Windows 7 64bit (Cygwin) *\n\n    Node.js 0.8.11\n      - OS X 10.7.4\n      - Travis (linux): https://travis-ci.org/wadey/node-microtime\n\n## Warning for Cygwin users\n\nIt appears that Cygwin only implements `gettimeofday(2)` with [millisecond accuracy](http://old.nabble.com/gettimeofday---millisecond-accuracy-p21085475.html).\n",
  "readmeFilename": "README.md",
  "_id": "microtime@0.3.3",
  "dist": {
    "shasum": "a42af554175407148d36179459f16d9aaa380c50"
  },
  "_from": "microtime@",
  "_resolved": "https://registry.npmjs.org/microtime/-/microtime-0.3.3.tgz"
}
